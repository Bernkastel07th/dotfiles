[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
set background=dark
" colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
" 但し Colorscheme イベントの発生が抑制されないよう nested を付ける。
au MyAutoCmd VimEnter * nested call SetHighlightOptions()

function SetHighlightOptions()
  colorscheme iceberg
  highlight Normal ctermbg=NONE guibg=NONE
  highlight NonText ctermbg=NONE guibg=NONE
  highlight LineNr ctermbg=NONE guibg=NONE
  highlight Folded ctermbg=NONE guibg=NONE
  highlight EndOfBuffer ctermbg=NONE guibg=NONE
endfunction
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source = '''
augroup denite_filter
autocmd FileType denite call s:denite_my_settings()

function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>
  \ denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d
  \ denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p
  \ denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q
  \ denite#do_map('quit')
  nnoremap <silent><buffer><expr> i
  \ denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> <Space>
  \ denite#do_map('toggle_select').'j'
endfunction

" 半透明化
autocmd FileType denite set winblend=10
autocmd FileType denite-filter set winblend=10
augroup END

" use floating
let s:denite_win_width_percent = 0.85
let s:denite_win_height_percent = 0.7
let s:denite_default_options = {
    \ 'split': 'floating',
    \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
    \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
    \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
    \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
    \ 'highlight_filter_background': 'DeniteFilter',
    \ 'prompt': '$ ',
    \ 'start_filter': v:true,
    \ }
let s:denite_option_array = []
for [key, value] in items(s:denite_default_options)
  call add(s:denite_option_array, '-'.key.'='.value)
endfor
call denite#custom#option('default', s:denite_default_options)
call denite#custom#var('file/rec', 'command',
    \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
    \ [ '.git/', '.ropeproject/', '__pycache__/',
    \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/', 'node_modules'])

" Ag command on grep source
call denite#custom#var('grep', 'command', ['ag'])
call denite#custom#var('grep', 'default_opts', ['-i', '--vimgrep'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'separator', ['--'])
call denite#custom#var('grep', 'final_opts', [])

" grep
command! -nargs=? Dgrep call s:Dgrep(<f-args>)
function s:Dgrep(...)
  if a:0 > 0
    execute(':Denite -buffer-name=grep-buffer-denite grep -path='.a:1)
  else
    execute(':Denite -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').' grep')
  endif
endfunction
" show Denite grep results
command! Dresume execute(':Denite -resume -buffer-name=grep-buffer-denite '.join(s:denite_option_array, ' ').'')
" next Denite grep result
command! Dnext execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=+1 -immediately '.join(s:denite_option_array, ' ').'')
" previous Denite grep result
command! Dprev execute(':Denite -resume -buffer-name=grep-buffer-denite -cursor-pos=-1 -immediately '.join(s:denite_option_array, ' ').'')

" keymap
call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_statusline_format = ['E%d', 'W%d', 'OK']

" エラー間を移動するキーマップ
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let b:ale_fixers = {'javascript': ['prettier', 'eslint']}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier-eslint'],
\   'css': ['prettier']
\}

" ファイル保存時に実行
let g:ale_fix_on_save = 1

" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
'''

[[plugins]]
repo     = 'prettier/vim-prettier'
build    = 'npm install'
on_ft    = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
hook_source = '''
  " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
  let g:prettier#autoformat = 0

  " Prettierのパースエラーをquickfixに表示しない
  let g:prettier#quickfix_enabled = 0

  autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
'''

[[plugins]]
# カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
  " NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
  let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }

  " INSERTモードのON/OFFに合わせてトグル
  " autocmd  InsertEnter * :PreciousSwitch
  " autocmd  InsertLeave * :PreciousRese
'''

[[plugins]]
# カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]
# 行番号の左側にdiffの+-とかが表示されるようにする、[c と ]c で前後のHunkに移動できる。
repo = 'airblade/vim-gitgutter'
hook_add = '''
let g:gitgutter_sign_modified = 'M'
let g:gitgutter_max_signs = 5000
" カレント行のhunkについて diff/add/reset を行うマップを追加
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>ha <Plug>GitGutterStageHunk
nmap <Leader>hr <Plug>GitGutterRevertHunk
nmap <Leader>hp <Plug>GitGutterPreviewHunk
nmap <Leader>hd <Plug>GitGutterPreviewHunk
'''

[[plugins]]
# 言語ごとの機能拡張をサポートする言語サーバークライアント
repo = 'neoclide/coc.nvim'
merged = '0'
rev = 'release'
build = 'yarn install --frozen-lockfile'
hook_add = '''
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')
" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>
function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
'''

[[plugins]]
# vim上でgitを扱えるCUI
repo = 'tpope/vim-fugitive'
hook_add = '''
" grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow
" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}
'''
hook_source = '''
nnoremap <leader>gs :tab sp<CR>:Gstatus<CR>:only<CR>
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>
nnoremap <leader>gl :Git log<CR>
nnoremap <leader>gh :tab sp<CR>:0Glog<CR>
" abbrev for `git history`: create new quickfix tab for history
nnoremap <leader>gp :Gpush<CR>
nnoremap <leader>gf :Gfetch<CR>
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gr :Grebase -i<CR>
nnoremap <leader>gg :Ggrep
nnoremap <leader>gm :Gmerge
'''

[[plugins]]
# ステータスラインを手軽にかっこ良くする(要フォントパッチ: Powerline)
repo = 'itchyny/lightline.vim'
hook_add = '''
" lightlineがあればshowmodeは不用なので消す
set noshowmode
" ステータスラインを常に表示
set laststatus=2
" フォントパッチが何種類かあるのでコードでメモ
let s:powerfonts = {
      \ 'powerline':     { 'left':"\ue0b0", 'leftsub':"\ue0b1", 'right':"\ue0b2", 'rightsub':"\ue0b3", 'branch':"\ue0a0", 'linecolumn':"\ue0a1", 'readonly':"\ue0a2" },
      \ 'vim-powerline': { 'left':"\u2b80", 'leftsub':"\u2b81", 'right':"\u2b82", 'rightsub':"\u2b83", 'branch':"\u2b60", 'linecolumn':"\u2b81", 'readonly':"\u2b64" }
      \ }
" Patched fonts for Powerline https://github.com/powerline/fonts
let s:powerfont = s:powerfonts['powerline']
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
        \  },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'fugitive': 'LightlineFugitive',
        \   'readonly': 'LightlineReadonly'
        \ }
        \ }

function! LightlineModified()
  return &ft =~ 'help\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineFugitive()
  if &ft !~? 'gundo' && exists('fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineReadonly()
  return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction
'''

[[plugins]]
# iconセット(要フォントパッチ: NerdFontを使う)
# Patched fonts for NerdFont https://github.com/ryanoasis/nerd-fonts#font-installation
repo = 'ryanoasis/vim-devicons'

[[plugins]]
# スコープごとにタグをウィンドウに表示するVimプラグイン
repo = 'majutsushi/tagbar'

[[plugins]]
# ツリー状のundo履歴をブラウズする :GundoTree
repo = 'sjl/gundo.vim'

[[plugins]]
# cssの色をプレビュー
repo = 'lilydjwg/colorizer'

[[plugins]]
# emmet
repo = 'mattn/emmet-vim'

[[plugins]]
# テキストを囲うやつ
repo = 'tpope/vim-surround'

[[plugins]]
# ファイルの一括リネーム
repo = 'qpkorr/vim-renamer'

[[plugins]]
# 全角と半角の空白文字を可視化
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
# :Tabularize /, とかでアライン整形（使い方メモ http://teotr.github.io/blog/2011/04/15/tabular/
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]]
# g> g< gs で引数の位置交換を簡単に行う
repo = 'machakann/vim-swap'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
let g:indentLine_faster = 1
nmap <silent><Leader>i :<C-u>IndentLinesToggle<CR>
'''

[[plugins]]
repo = 'elzr/vim-json'
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''

[[plugins]]
# 単語上で K でftに対応したdevdocs検索が出来るようにする http://bit.ly/1sbXZnf
repo = 'rhysd/devdocs.vim'
hook_add = '''
autocmd FileType c,cpp,rust,haskell,python,go,javascript,ruby,php nmap <buffer>K <Plug>(devdocs-under-cursor)
'''

[[plugins]]
repo = 'shuntaka9576/preview-swagger.nvim'
build = 'yarn install'

[[plugins]]
# ctrl-w で分割したwindowのリサイズ制御
repo = 'simeji/winresizer'

[[plugins]]
repo = 'tyru/vim-altercmd'
on_event = ['VimEnter']
hook_source = '''
" 使うには初期化処理が必要
call altercmd#load()
" helpを横分割で右側に開く
CAlterCommand h[elp] vertical belowright help
" Denite
CAlterCommand df Denite file
CAlterCommand dr Denite file/rec
" Tabularize
CAlterCommand arize Tabularize
" Prettier
CAlterCommand pr Prettier
" GundoTree
CAlterCommand gundo GundoTree
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
hook_add = '''
call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \ })
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
depends = ['defx-git', 'defx-icons']
hook_add = '''
nnoremap <silent> <Space>f :<C-u>Defx -listed -resume -buffer-name=tab`tabpagenr()`<CR>
'''
hook_source = '''
function! Root(path) abort
  return fnamemodify(a:path, ':t')
endfunction
call defx#custom#source('file', {
  \ 'root': 'Root',
  \})
call defx#custom#column('filename', {
  \ 'directory_icon': '',
  \ 'opened_icon': '',
  \ })
call defx#custom#column('mark', {
  \ 'readonly_icon': '✗',
  \ 'selected_icon': '✓',
  \ })
call defx#custom#option('_', {
  \ 'columns': 'indent:git:icons:filename',
  \ 'show_ignored_files': 1,
  \ })
'''
[plugins.ftplugin]
defx = '''
nnoremap <silent><buffer><expr> ~ defx#async_action('cd')
nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
nnoremap <silent><buffer><expr> l defx#async_action('open')
nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
nnoremap <silent><buffer><expr> <Tab> winnr('$') != 1 ? ':<C-u>wincmd w<CR>' : ':<C-u>Defx -buffer-name=temp -split=vertical<CR>'
nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
nnoremap <silent><buffer><expr> <CR> defx#do_action('open')
nnoremap <silent><buffer><expr> q defx#do_action('quit')
nnoremap <silent><buffer><expr> o defx#async_action('open_or_close_tree')
nnoremap <silent><buffer><expr> O defx#async_action('open_tree_recursive')
nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')
nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
nnoremap <silent><buffer><expr> E defx#do_action('open', 'vsplit')
nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
nnoremap <silent><buffer><expr> N defx#do_action('new_file')
nnoremap <silent><buffer><expr> P defx#do_action('open', 'pedit')
nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'Time')
nnoremap <silent><buffer><expr> c defx#do_action('copy')
nnoremap <silent><buffer><expr> d defx#do_action('remove_trash')
nnoremap <silent><buffer><expr> m defx#do_action('move')
nnoremap <silent><buffer><expr> p defx#do_action('paste')
nnoremap <silent><buffer><expr> r defx#do_action('rename')
nnoremap <silent><buffer><expr> se defx#do_action('save_session')
nnoremap <silent><buffer><expr> sl defx#do_action('load_session')
nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
'''
