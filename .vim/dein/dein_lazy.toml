# memo: dein_lazy.tomlは必要なものを導入した後に読み込みたいPluginを書いておく
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_statusline_format = ['E%d', 'W%d', 'OK']

" エラー間を移動するキーマップ
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let b:ale_fixers = {'javascript': ['prettier', 'eslint']}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier-eslint'],
\   'css': ['prettier']
\}

" ファイル保存時に実行
let g:ale_fix_on_save = 1

" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1
'''

[[plugins]]
repo     = 'prettier/vim-prettier'
build    = 'npm install'
on_ft    = ['javascript', 'typescript', 'vue', 'css', 'scss', 'json', 'markdown']
hook_source = '''
  " @formatアノテーションを持ったファイルの自動フォーマットを無効にする
  let g:prettier#autoformat = 0

  " Prettierのパースエラーをquickfixに表示しない
  let g:prettier#quickfix_enabled = 0

  autocmd BufWritePre *.js,*.ts,*.vue,*.css,*.scss,*.json,*.md PrettierAsync
'''

[[plugins]]
repo = 'cocopon/vaffle.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # ステータスラインを手軽にかっこ良くする(要フォントパッチ)
repo = 'itchyny/lightline.vim'
hook_add = '''
" lightlineがあればshowmodeは不用なので消す
set noshowmode
" ステータスラインを常に表示
set laststatus=2
" フォントパッチが何種類かあるのでコードでメモ
let s:powerfonts = {
      \ 'powerline':     { 'left':"\ue0b0", 'leftsub':"\ue0b1", 'right':"\ue0b2", 'rightsub':"\ue0b3", 'branch':"\ue0a0", 'linecolumn':"\ue0a1", 'readonly':"\ue0a2" },
      \ 'vim-powerline': { 'left':"\u2b80", 'leftsub':"\u2b81", 'right':"\u2b82", 'rightsub':"\u2b83", 'branch':"\u2b60", 'linecolumn':"\u2b81", 'readonly':"\u2b64" }
      \ }
" Patched fonts for Powerline https://github.com/powerline/fonts
let s:powerfont = s:powerfonts['powerline']
let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'mode_map': {'c': 'NORMAL'},
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ]
        \ },
        \ 'component_function': {
        \   'modified': 'LightlineModified',
        \   'readonly': 'LightlineReadonly',
        \   'fugitive': 'LightlineFugitive',
        \   'filename': 'LightlineFilename',
        \   'fileformat': 'LightlineFileformat',
        \   'filetype': 'LightlineFiletype',
        \   'fileencoding': 'LightlineFileencoding',
        \   'mode': 'LightlineMode'
        \ }
        \ }

function! LightlineModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! LightlineFilename()
  return ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
endfunction

function! LightlineFugitive()
  if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
    return fugitive#head()
  else
    return ''
  endif
endfunction

function! LightlineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightlineFiletype()
  return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
endfunction

function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc : &enc) : ''
endfunction

function! LightlineMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction
'''

[[plugins]]
# ツリー状のundo履歴をブラウズする :GundoTree
repo = 'sjl/gundo.vim'

[[plugins]]
# cssの色をプレビュー
repo = 'lilydjwg/colorizer'

[[plugins]]
# emmet
repo = 'mattn/emmet-vim'

[[plugins]]
# テキストを囲うやつ
repo = 'tpope/vim-surround'

[[plugins]]
# ファイルの一括リネーム
repo = 'qpkorr/vim-renamer'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # Github の絵文字やIssueやリポジトリURLが補完されるようになる
repo = 'rhysd/github-complete.vim'
on_i = 1

[[plugins]]
# :Tabularize /, とかでアライン整形（使い方メモ http://teotr.github.io/blog/2011/04/15/tabular/
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

[[plugins]] # g> g< gs で引数の位置交換を簡単に行う
repo = 'machakann/vim-swap'

[[plugins]] # 単語上で K でftに対応したdevdocs検索が出来るようにする http://bit.ly/1sbXZnf
repo = 'rhysd/devdocs.vim'
hook_add = '''
  autocmd FileType c,cpp,rust,haskell,python,go,javascript,ruby,php nmap <buffer>K <Plug>(devdocs-under-cursor)
'''
