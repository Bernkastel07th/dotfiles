[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
let g:NERDTreeShowBookmarks=1
autocmd VimEnter * NERDTree
nnoremap <silent><C-e> :NERDTreeToggle<CR>

" NERDTrees File highlighting
function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
 exec 'autocmd filetype nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
 exec 'autocmd filetype nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
endfunction
call NERDTreeHighlightFile('py',     'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('md',     'blue',    'none', '#3366FF', '#151515')
call NERDTreeHighlightFile('yml',    'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('config', 'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('conf',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('json',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('html',   'yellow',  'none', 'yellow',  '#151515')
call NERDTreeHighlightFile('styl',   'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('css',    'cyan',    'none', 'cyan',    '#151515')
call NERDTreeHighlightFile('rb',     'Red',     'none', 'red',     '#151515')
call NERDTreeHighlightFile('js',     'Red',     'none', '#ffa500', '#151515')
call NERDTreeHighlightFile('php',    'Magenta', 'none', '#ff00ff', '#151515')
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
" grep検索の実行後にQuickFix Listを表示する
autocmd QuickFixCmdPost *grep* cwindow

" ステータス行に現在のgitブランチを表示する
set statusline+=%{fugitive#statusline()}
'''

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
" vimを立ち上げたときに、自動的にvim-indent-guidesをオンにする
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_start_level = 2
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]] # syntax
repo = 'HerringtonDarkholme/yats.vim'

[[plugins]] # コード補完
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#sources#go#package_dot = 1
  set completeopt-=preview " プレビューウィンドウを開かないようにする
  "set completeopt+=noinsert " 最初の候補がデフォで選択されるようにする
  " TAB や Shift-TAB で補完補完候補を上下する
  if ! dein#tap('neosnippet.vim')
    " neosnippet使う場合はそっちも考慮した設定をしてるのでスキップ
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  endif
  inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
  inoremap <expr><UP>   pumvisible() ? "\<C-p>" : "<UP>"
  inoremap <expr><DOWN> pumvisible() ? "\<C-n>" : "<DOWN>"
  " python3が無かったらメッセージを表示
  if has('nvim') && !has('python3')
    echo "require python3 https://gist.github.com/kawaz/393c7f62fe6e857cc3d9 or execute 'pip3 install neovim --upgrade' and :call dein#update()"
  endif
'''

[[plugins]]
repo = 'Shougo/denite.nvim'

[[plugins]]
repo = 'Shougo/neocomplete'
if = 'has("lua")'
on_i = 1
hook_add = '''
  " 最初の候補がデフォで選択されないようにする
  set completeopt+=noinsert
  " 起動時に有効化
  let g:neocomplete#enable_at_startup = 1
  " " 自動で補完候補を出す
  let g:neocomplete#disable_auto_complete = 0
  " メニューの一番目を自動選択
  let g:neocomplete#enable_auto_select = 1
  let g:neocomplete#keyword_patterns = get(g:, 'neocomplete#keyword_pattern', {})
  let g:neocomplete#keyword_patterns['default'] = '\h\w*'
  " ログファイルは補完を停止
  let g:neocomplete#sources#buffer#disabled_pattern = '\.log\|\.log\.\|\.jax\|Log.txt'
  " " 大文字小文字とかあいまい検索とか
  let g:neocomplete#enable_ignore_case = 1
  let g:neocomplete#enable_smart_case  = 1
  let g:neocomplete#enable_fuzzy_completion = 1
  " Enable omni completion.
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  let g:neocomplete#force_omni_input_patterns = get(g:, 'neocomplete#force_omni_input_patterns', {})
  let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'
  let g:neocomplete#force_omni_input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
  let g:neocomplete#delimiter_patterns = get(g:, 'neocomplete#delimiter_patterns', {})
  let g:neocomplete#delimiter_patterns.ruby = ['::']
  let g:neocomplete#same_filetypes = get(g:, 'neocomplete#same_filetypes', {})
  let g:neocomplete#same_filetypes.ruby = 'eruby'
  " KeyMaps
  " Tabでいい感じに補完
  inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
  " Enterで確定（確定と同時に改行しない）
  inoremap <expr><CR>  pumvisible() ? neocomplete#close_popup() : "<CR>"
'''
hook_post_source = '''
  " neco-look を連携させる（カスタムソース追加＆text_mode_filetypesで有効化したいftリストの設定が必要）
  call neocomplete#custom#source('look', 'min_pattern_length', 1)
  let g:neocomplete#text_mode_filetypes = get(g:, 'neocomplete#text_mode_filetypes', {})
  for t in [ 'rst', 'markdown', 'gitrebase', 'gitcommit', 'vcs-commit', 'hybrid', 'text', 'help', 'tex' ]
    let g:neocomplete#text_mode_filetypes[t] = 1
  endfor
'''
[[plugins]] # 英単語が補完されるようになる(neocompleteから呼ばれる)
repo = 'ujihisa/neco-look'
on_i = 1

[[plugins]] # Github の絵文字やIssueやリポジトリURLが補完されるようになる
repo = 'rhysd/github-complete.vim'
on_i = 1

[[plugins]] # Syntaxファイルから補完候補を作ってくれる
repo = 'Shougo/neco-syntax'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_i = 1
hook_post_source = '''
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#enable_complete_done = 1
let g:neosnippet#expand_word_boundary = 1
" スニペットディレクトリを設定（同じスニペットが見つかった場合は最初の先に見つかったほうが優先される)
let g:neosnippet#snippets_directory = get(g:, 'neosnippet#snippets_directory', [])
let g:neosnippet#snippets_directory += [$XDG_CONFIG_HOME . '/vim/rc/neosnippets']
if ! empty(dein#get('neosnippet-snippets'))
  let g:neosnippet#snippets_directory += [dein#get('neosnippet-snippets').path . '/neosnippets']
endif
" Plugin key-mappings. スニペット補完候補がある場合は C-k でスニペットを展開する（Enterではない）
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
" " SuperTab like snippets behavior. スニペットのプレースホルダ上にいる時はTabで次のプレースホルダにジャンプする
" imap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : pumvisible() ? '\<C-n>' : '\<TAB>'
" smap <expr><TAB> neosnippet#jumpable() ? '\<Plug>(neosnippet_expand_or_jump)' : '\<TAB>'
" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
  " NORMALモードのカーソル移動中に頻繁に切り替わるとうざいのでデフォは無効化しておく(helpは例外)
  let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }

  " INSERTモードのON/OFFに合わせてトグル
  " autocmd  InsertEnter * :PreciousSwitch
  " autocmd  InsertLeave * :PreciousRese
'''

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # ステータスラインを手軽にかっこ良くする(要フォントパッチ)
repo = 'itchyny/lightline.vim'
hook_add = '''
  " lightlineがあればshowmodeは不用なので消す
  set noshowmode
  " ステータスラインを常に表示
  set laststatus=2
  " フォントパッチが何種類かあるのでコードでメモ
  let s:powerfonts = {
        \ 'powerline':     { 'left':"\ue0b0", 'leftsub':"\ue0b1", 'right':"\ue0b2", 'rightsub':"\ue0b3", 'branch':"\ue0a0", 'linecolumn':"\ue0a1", 'readonly':"\ue0a2" },
        \ 'vim-powerline': { 'left':"\u2b80", 'leftsub':"\u2b81", 'right':"\u2b82", 'rightsub':"\u2b83", 'branch':"\u2b60", 'linecolumn':"\u2b81", 'readonly':"\u2b64" }
        \ }
  " Patched fonts for Powerline https://github.com/powerline/fonts
  let s:powerfont = s:powerfonts['powerline']
  " TODO: syntastic, ctrlpmark, unite, vimshell, vimfiler, ...対応
  " TODO: winwidth(0) を見てレスポンシブ対応
  " TODO: gitのahead/behind数表示
  let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'fugitive', 'gitgutter', 'readonly', 'relativepath', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'fugitive': 'LightLineFugitive',
        \   'gitgutter': 'LightLineGitgutter',
        \   'readonly': 'LightLineReadonly',
        \   'modified': 'LightLineModified'
        \ },
        \ 'separator': { 'left': s:powerfont.left, 'right': s:powerfont.right },
        \ 'subseparator': { 'left': s:powerfont.leftsub, 'right': s:powerfont.rightsub }
        \ }
  " gitブランチ表示
  function! LightLineFugitive()
    try
      if &ft !~? 'help\|vimfiler\|gundo' && exists("*fugitive#head")
        let _ = fugitive#head()
        return strlen(_) ? s:powerfont.branch .' '. _ : ''
      endif
    catch
    endtry
    return ''
  endfunction
  " gitハンク表示
  function! LightLineGitgutter()
    if ! exists('*GitGutterGetHunkSummary')
          \ || ! get(g:, 'gitgutter_enabled', 0)
          \ || winwidth('.') <= 90
      return ''
    endif
    let symbols = [
          \ g:gitgutter_sign_added,
          \ g:gitgutter_sign_modified,
          \ g:gitgutter_sign_removed
          \ ]
    let hunks = GitGutterGetHunkSummary()
    let ret = []
    for i in [0, 1, 2]
      if hunks[i] > 0
        call add(ret, symbols[i] . hunks[i])
      endif
    endfor
    return join(ret, ' ')
  endfunction
  " 読込み専用マーク
  function! LightLineReadonly()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &readonly ? s:powerfont.readonly : ''
  endfunction
  " 編集マーク
  function! LightLineModified()
    return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
  endfunction
  if s:dein_enabled && dein#tap('lightline.vim')
  let g:lightline = {
        \'active': {
              \'right': [['ale']]},
        \'component_function': {
              \'ale': 'LLAle',
              \},
        \}
  if dein#tap('ale')
    function! LLAle()
      let l:count = ale#statusline#Count(bufnr(''))
      let l:errors = l:count.error + l:count.style_error
      let l:warnings = l:count.warning + l:count.style_warning
      return l:count.total == 0 ? 'OK' : 'E:' . l:errors . ' W:' . l:warnings
    endfunction
  else
    function! LLAle()
      return ''
    endfunction
  endif
endif
'''

[[plugins]] # C-pでファイル選択が捗る http://bit.ly/NuXA5u
repo = 'kien/ctrlp.vim'
hook_add = '''
  let g:ctrlp_use_migemo = 1
  " ignoreされてるファイル/ディレクトリは検索しない（高速化）
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
'''

[[plugins]] # 行番号の左側にdiffの+-とかが表示されるようにする、[c と ]c で前後のHunkに移動できる。
repo = 'airblade/vim-gitgutter'
hook_add = '''
  let g:gitgutter_sign_modified = 'M'
  let g:gitgutter_max_signs = 5000
  " カレント行のhunkについて diff/add/reset を行うマップを追加
  nmap <Leader>hs <Plug>GitGutterStageHunk
  nmap <Leader>ha <Plug>GitGutterStageHunk
  nmap <Leader>hr <Plug>GitGutterRevertHunk
  nmap <Leader>hp <Plug>GitGutterPreviewHunk
  nmap <Leader>hd <Plug>GitGutterPreviewHunk
'''

[[plugins]]
# :Tabularize /, とかでアライン整形（使い方メモ http://teotr.github.io/blog/2011/04/15/tabular/
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'

## test
[[plugins]] # テストコードへジャンプ
repo = 'janko-m/vim-test'
hook_add = '''
  let g:test#strategy = 'neovim'
  " mappings
  nmap <silent> <leader>f :TestNearest<CR>
  nmap <silent> <leader>i :TestFile<CR>
  nmap <silent> <leader>a :TestSuite<CR>
  nmap <silent> <leader>l :TestLast<CR>
  nmap <silent> <leader>g :TestVisit<CR>
  " 言語ごとのオプション
  let test#python#pytest#options = {'nearest': '-v', 'file': '-v', 'suite': '-v'}
  let test#go#gotest#options     = {'nearest': '-v', 'file': '-v', 'suite': '-v'}
'''

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]] # tagsの凄い奴
repo = 'majutsushi/tagbar'
hook_add = '''
  nmap <F8> :TagbarToggle<CR>
  " auto-ctags
  let g:auto_ctags = 1
  let g:auto_ctags_directory_list = ['.git', '.svn']
  let g:auto_ctags_tags_name = 'tags'
  let g:auto_ctags_tags_args = '--tag-relative --recurse --sort=yes'
  let g:auto_ctags_filetype_mode = 1
  " let g:tagbar_left = 1
'''
hook_post_source = '''
  call tagbar#autoopen(1)
'''

[[plugins]] # g> g< gs で引数の位置交換を簡単に行う
repo = 'machakann/vim-swap'

[[plugins]] # 単語上で K でftに対応したdevdocs検索が出来るようにする http://bit.ly/1sbXZnf
repo = 'rhysd/devdocs.vim'
hook_add = '''
  autocmd FileType c,cpp,rust,haskell,python,go,javascript,ruby,php nmap <buffer>K <Plug>(devdocs-under-cursor)
'''

[[plugins]] # 自動でctagsを実行する
repo = 'soramugi/auto-ctags.vim'

[[plugins]]
repo = 'kawaz/shellcheck.vim'
on_ft = ['sh']

[[plugins]]
repo = 'kawaz/syntastic-local-eslint.vim'
hook_add = "let g:syntastic_javascript_checkers = ['eslint']"

[[plugins]]
repo = 'kawaz/quickrun-local-mocha.vim'

[[plugins]] # ファイル保存時にエラー行があればハイライトする
repo = 'scrooloose/syntastic'
hook_add = '''
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1
  let g:syntastic_check_on_open = 1
  let g:syntastic_check_on_wq = 0
  let g:syntastic_error_symbol='✗'
  let g:syntastic_warning_symbol='⚠'
  let g:syntastic_style_error_symbol = '✗'
  let g:syntastic_style_warning_symbol = '⚠'
  " debug系
  let g:syntastic_debug = 0
  let g:syntastic_debug_file = expand('$TMPDIR/syntastic.log')
  function! s:SyntasticDebugToggle()
    let g:syntastic_debug = !g:syntastic_debug
    echo (g:syntastic_debug ? '🔔  Enabled' : '🔕a Disabled').': ' . g:syntastic_debug_file
  endfunction
  command! SyntasticDebugToggle :call s:SyntasticDebugToggle()
  " shellcheckの引数メモ
  " -x      : 変数未定義のチェックなどでsource先ファイルも考慮するようにする
  " -s bash : shebang が無い場合のデフォルトをbashモードにする
  let g:syntastic_sh_shellcheck_args = '-x -s bash'
'''

[[plugins]]
repo = 'tyru/vim-altercmd'
on_event = ['VimEnter']
hook_source = '''
  " 使うには初期化処理が必要
  call altercmd#load()
  " helpを横分割で右側に開く
  CAlterCommand h[elp] vertical belowright help
  " helpを横分割で右側に開く
  CAlterCommand e tabnew
'''

[[plugins]]
# ツリー状のundo履歴をブラウズする :GundoTree
repo = 'sjl/gundo.vim'

[[plugins]]
# cssの色をプレビュー
repo = 'lilydjwg/colorizer'

[[plugins]]
# emmet
repo = 'mattn/emmet-vim'

[[plugins]]
# テキストを囲うやつ
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'rizzatti/dash.vim'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
let g:ale_statusline_format = ['E%d', 'W%d', 'OK']

" エラー間を移動するキーマップ
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

let b:ale_fixers = {'javascript': ['prettier', 'eslint']}

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier-eslint'],
\}

" ファイル保存時に実行
let g:ale_fix_on_save = 1

" ローカルの設定ファイルを考慮する
let g:ale_javascript_prettier_use_local_config = 1

'''
